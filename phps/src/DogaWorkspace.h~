////////////////////////////////////////////////////////////////////////////////
//
// DogaWorkspace.h - Class Header File
//
// Description: Moonlight Company
//              Maze Solver Project
//              Doğa Yücalan's Playground
//
// Modified : 16.03.2016 by Utku Norman ( norman.utku@metu.edu.tr )
// Created  : 16.03.2016 by Utku Norman ( norman.utku@metu.edu.tr )
//
// Style:
//  http://geosoft.no/development/cppstyle.html#Include Files
//
// Associated code-snippet sources:
// https://solarianprogrammer.com/2015/05/08/detect-red-circles-image-using-opencv/
// http://docs.opencv.org/3.1.0/df/d9d/tutorial_py_colorspaces.html#gsc.tab=0
//
////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>

#include <opencv2/opencv.hpp>

// show image - helper function
void showImage(
	const std::string label,
	cv::Mat image);

// draw contours - helper function
void my_drawContours(
	const std::string label,
	cv::Mat contourImage,
	std::vector< std::vector< cv::Point > > contours,
	std::vector< cv::Vec4i > hierarchy);

//////////////////////////////////////////////////////////
////////// Functions below will go to IPhandler //////////
//////////////////////////////////////////////////////////


// grayscale, threshold, dilate
void thresholdingOverall(
	const cv::Mat rawImage,
	cv::Mat& thresholdedImage,
	cv::Mat& dilatedImage);

// find contours
void contoursExtraction(
	const cv::Mat contourImage,
	std::vector< std::vector< cv::Point > >& contours,
    	std::vector< cv::Vec4i >& hierarchy);

// draw curves, set labels, get board vertices
void boardVerticesDetection(
	cv::Mat& image,
	const std::vector< std::vector< cv::Point > > contours,
	std::vector< cv::Point >& vertices);

// detecting red ("start"), green ("end") as of now, will try blue ("ball")
void thresholdingForFeaturePoints(
	cv::Mat& image,
	const std::string color,
	cv::Point& center,
	int& radius);

// find perspective transform matrix
void findTransformationMatrix(
	cv::Point2f* source,
	cv::Point2f* destination,
	cv::Mat& M);

// do perspective transform
void transformImage(
	cv::Mat inputimage,
	cv::Mat& outputimage,
	cv::Mat M,
	int res);
