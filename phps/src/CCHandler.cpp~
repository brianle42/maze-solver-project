////////////////////////////////////////////////////////////////////////////////
//
// CCHandler.cpp - Source File
//
// Description: Moonlight Company
//              Maze Solver Project
//              Camera Capture Handler Class
//
// Modified : 24.04.2016 by Utku Norman  ( norman.utku@metu.edu.tr  )
// Created  : 24.04.2016 by Utku Norman  ( norman.utku@metu.edu.tr  )
//
// People	: 	Doga Yucalan ( yucalan.doga@metu.edu.tr )
//			Utku Norman  ( norman.utku@metu.edu.tr  )
//
////////////////////////////////////////////////////////////////////////////////

// Command Line I/O related headers
#include <cstddef>  // std::nullptr
#include <iostream> // std::cout, std::cin, std::endl
#include <iomanip>  // std::setw

// Image Processing (OpenCV) header
#include <opencv2/opencv.hpp>

// Include class-related definitions 
//	such as the struct CCPacket
#include "../include/CCHandler.h"

////////////////////////////////////////////////////////////////////////////////
/* Constructor */
CCHandler::CCHandler( void )
{
}

////////////////////////////////////////////////////////////////////////////////
/* Public Methods */

void CCHandler::printState( bool debugMode )
{

	std::cout << std::endl;
	std::cout << "-----------------------------------------------";
	std::cout << std::endl;
	std::cout << "CCHandler.printState() called. Printing state:" ;
	std::cout << std::endl;
	std::cout << "-----------------------------------------------";
	std::cout << std::endl;

}

CCPacket CCHandler::handle( 
	int argcData 	, 
	char** argvData	,
	bool debugMode
	)
{

	CCPacket state;

	// Check for the correct number for arguments
	if ( argcData != 2 )
	{
		std::cerr << "usage: DisplayImage.out <Image_Path>";
		std::cerr << std::endl;
		//exit(-1);
		return CCPacketNull;
	}

	// Load the image addressed in the first argument
	cv::Mat inputImage;
	inputImage = cv::imread( argvData[ 1 ] , 1 );

	// Check for validity of the image
	if ( !inputImage.data )  // If successfully loaded
	{
		std::cerr << "No image data \n";
		std::cerr << std::endl;
		//exit(-1);
		return CCPacketNull;
	}

	// Open Camera 
	cap=VideoCapture(0);
	cap.set(4,1200);
	cap.set(3,1600);
	cap.read(img);

	state.image = inputImage.clone();

	return state;

}

////////////////////////////////////////////////////////////////////////////////
/* Private Methods */
