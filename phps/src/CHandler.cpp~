////////////////////////////////////////////////////////////////////////////////
//
// CHandler.cpp - Source File
//
// Description: Moonlight Company
//              Maze Solver Project
//              Communcation Handler Class
//
// Modified : 24.04.2016 by Utku Norman  ( norman.utku@metu.edu.tr  )
// Created  : 24.04.2016 by Utku Norman  ( norman.utku@metu.edu.tr  )
//
// People	: 	Doga Yucalan ( yucalan.doga@metu.edu.tr )
//			Utku Norman  ( norman.utku@metu.edu.tr  )
//
////////////////////////////////////////////////////////////////////////////////

// Command Line I/O related headers
#include <cstddef>  // std::nullptr
#include <iostream> // std::cout, std::cerr, std::cin, std::endl
#include <iomanip>  // std::setw
#include <string>

// Serial Communication Header
#include "../include/serial/serial.h"

// Descriptions for CUPacket
#include "../include/CUHandler.h"

// Include class-related definitions 
//	such as the struct CPacket
#include "../include/CHandler.h"



////////////////////////////////////////////////////////////////////////////////
/* Constructor */
CHandler::CHandler( void )
{



  portName.assign( "/dev/ttyUSB1" );
  baudRate = 115200 ;

  serialPort.setPort( portName ) ;
  serialPort.setTimeout( serial::Timeout::max( ) , 250 , 0 , 250 , 0 ) ;
  serialPort.setBaudrate( baudRate ) ;

  // serialPort.open( ) ;

  try
  {

	serialPort.open( ) ;

  }
  catch ( std::exception &e ) 
  {
		std::cerr << "CHandler(): port open failed. ";
		// << e.what() << endl;
		std::cerr << std::endl;
  }

}

////////////////////////////////////////////////////////////////////////////////
/* Public Methods */

void CHandler::printState( bool debugMode )
{

	std::cout << std::endl;
	std::cout << "-----------------------------------------------";
	std::cout << std::endl;
	std::cout << "CHandler.printState() called. Printing state:"  ;
	std::cout << std::endl;

	
	std::cout << "Port: " << serialPort.getPort() ;
	std::cout << std::endl ;
/*
	std::cout << "Timeout: " << serialPort.getTimeout() ;
	std::cout << std::endl ;

	std::cout << "Parity: " << serialPort.getParity() ;

	std::cout << "Stopbits: " << serialPort.getStopbits() ;


	std::cout << std::endl ;
*/

	std::cout << "-----------------------------------------------";
	std::cout << std::endl;

}

CHPacket CHandler::handle( CUPacket command )
{

	//CHPacket state = CHPacketNull;

	//size_t numBytesWrote = serialPort.write( command.data );

  	if( serialPort.isOpen( ) && !IsNull( command ) )
  	{

		serialPort.write( command.data ) ;

  	}
	else
	{

		if( IsNull( command ) )
			std::cerr << "CHandler.handle(): command is null!" ;
		else
			std::cerr << "CHandler.handle(): serialPort is not open!" ;

		std::cerr << std::endl ;
		
	}


	//return state;
	return CHPacketNull ;

}

////////////////////////////////////////////////////////////////////////////////
/* Private Methods */
